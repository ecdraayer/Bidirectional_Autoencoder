num.cluster <- 2
d <- load.distanceK('NormalizedTrajectories_2880Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
names(cluster.result1) <- c('Visit', 'Ward.D2')
#Import data
load.distanceK <- function(name){
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
dis.matrix <- read.csv(filename)
#dis.matrix = dis.matrix[,-501] #Hallie's edit to get rid of mysterious X column
row.names(dis.matrix) <- names(dis.matrix)[1:500]
return(as.dist(dis.matrix))
}
wssplot <- function(data, nc=15){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#clusters distance matrix into specified number of clusters based off given method
clustering <- function(d, k, method, link="ward.D2"){
# hierarchical clustering
if (method =='hclust'){
fit <- hclust(d, method=link)
#plot(fit)
#plot(as.phylo(fit), type = "fan")
#         rect.hclust(fit, k = 3, border = "red")
#         source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
#         op = par(bg = "#EFEFEF")
#         A2Rplot(fit, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B", "#4ECDC4", "#556270","#337DFF"))
groups <- cutree(fit, k)
print(dim(groups))
op = par(bg = "#EFEFEF")
A2Rplot(fit, k, boxes = FALSE, col.up = "gray50")
cluster.result <- data.frame('visits'= names(groups), 'ward'=as.numeric(groups))
}
return(cluster.result)
}
process.clusters <- function(d, name, k) {
c = list()
for(i in 1:k){
c[[i]] <- d[ which(d$ward == i) ,1]
c[[i]] <- as.integer(gsub("[^0-9]", "", c[[i]]))
c[[i]] <- data.frame(c[[i]])
}
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
Ldata = read.csv(filename, header=FALSE)
inCommon = list()
for(i in 1:k){
inCommon[[i]] <- merge(Ldata, c[[i]], by.x = "V1", by.y = "c..i..")
print(inCommon[[i]])
print(as.data.frame(table(inCommon[[i]]$V2)))
}
}
WCSS<- function(d, k_max){
# determine the number of clusters
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(d, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
}
clustering.process <- function() {
# Clustering
num.cluster <- 2
d <- load.distanceK('NormalizedTrajectories_2880Minutes_After')
WCSS(d, 7)
#The difference between these two was whether I was using a Kernel or Eucledian distance.  Overall it was me being lazy
#d <- load.distance('problem', select.prefix)
#wssplot(d,nc=6)
#clustering based off different statistical key points.
#fit <- hclust(d, method="ward.D2")
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
names(cluster.result1) <- c('Visit', 'Ward.D2')
#Saves the plot
filename <- paste('/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results/Top1000.hclust.ward.D2.csv',sep="")
write.csv(as.matrix(cluster.result1), file = filename, row.names = TRUE)
}
process.clusters(cluster.result1, 'labeled250', num.cluster)
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 2
d <- load.distanceK('NormalizedTrajectories_2880Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
d <- load.distanceK('NormalizedTrajectories_2880Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
#Import data
load.distanceK <- function(name){
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
dis.matrix <- read.csv(filename)
#dis.matrix = dis.matrix[,-501] #Hallie's edit to get rid of mysterious X column
row.names(dis.matrix) <- names(dis.matrix)[1:500]
return(as.dist(dis.matrix))
}
wssplot <- function(data, nc=15){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#clusters distance matrix into specified number of clusters based off given method
clustering <- function(d, k, method, link="ward.D2"){
# hierarchical clustering
if (method =='hclust'){
fit <- hclust(d, method=link)
#plot(fit)
#plot(as.phylo(fit), type = "fan")
#         rect.hclust(fit, k = 3, border = "red")
#         source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
#         op = par(bg = "#EFEFEF")
#         A2Rplot(fit, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B", "#4ECDC4", "#556270","#337DFF"))
groups <- cutree(fit, k)
print(dim(groups))
op = par(bg = "#EFEFEF")
A2Rplot(fit, k, boxes = FALSE, col.up = "gray50")
cluster.result <- data.frame('visits'= names(groups), 'ward'=as.numeric(groups))
}
return(cluster.result)
}
process.clusters <- function(d, name, k) {
c = list()
for(i in 1:k){
c[[i]] <- d[ which(d$ward == i) ,1]
c[[i]] <- as.integer(gsub("[^0-9]", "", c[[i]]))
c[[i]] <- data.frame(c[[i]])
}
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
Ldata = read.csv(filename, header=FALSE)
inCommon = list()
for(i in 1:k){
inCommon[[i]] <- merge(Ldata, c[[i]], by.x = "V1", by.y = "c..i..")
#print(inCommon[[i]])
print(as.data.frame(table(inCommon[[i]]$V2)))
}
}
WCSS<- function(d, k_max){
# determine the number of clusters
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(d, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
}
clustering.process <- function() {
# Clustering
num.cluster <- 2
d <- load.distanceK('NormalizedTrajectories_2880Minutes_After')
WCSS(d, 7)
#The difference between these two was whether I was using a Kernel or Eucledian distance.  Overall it was me being lazy
#d <- load.distance('problem', select.prefix)
#wssplot(d,nc=6)
#clustering based off different statistical key points.
#fit <- hclust(d, method="ward.D2")
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
names(cluster.result1) <- c('Visit', 'Ward.D2')
#Saves the plot
filename <- paste('/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results/Top1000.hclust.ward.D2.csv',sep="")
write.csv(as.matrix(cluster.result1), file = filename, row.names = TRUE)
}
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories_2880Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories_1440Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories_1440Minutes_After_2')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 11
d <- load.distanceK('NormalizedTrajectories')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories_1440Minutes_Before')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories_1200Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
d <- load.distanceK('NormalizedTrajectories_1440Minutes_Before')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
d <- load.distanceK('NormalizedTrajectories_1200Minutes_After')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
d <- load.distanceK('NormalizedTrajectories_600Minutes_After')
WCSS(d, 7)
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 8
d <- load.distanceK('NormalizedTrajectories_50TImeStamps')
WCSS(d, 7)
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 10
d <- load.distanceK('NormalizedTrajectories_50TImeStamps')
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
num.cluster <- 10
d <- load.distanceK('NormalizedTrajectories(9Attributes)')
WCSS(d, 7)
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled250', num.cluster)
process.clusters(cluster.result1, 'labeled500', num.cluster)
names(cluster.result1) <- c('Visit', 'Ward.D2')
process.clusters(cluster.result1, 'labeled500', num.cluster)
cluster.result1 <- clustering(d, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeled500', num.cluster)
name <- 'EHRData'
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
d <- read.csv(filename)
pc <- princomp(d, cor=TRUE, score=TRUE)
summary(pc)
plot(pc, type="l")
name <- 'EHRData'
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
d <- read.csv(filename)
pc <- princomp(d)
summary(pc)
plot(pc, type="l")
num.cluster <- 6
d1 <- load.distanceK('LeftAlignedData_5Hours')
c.clara = clara(d1, num.cluster, samples = 100)
ward = as.vector(c.clara$clustering)
visits = as.vector(names(c.clara$clustering))
data = data.frame(visits, ward)
process.clusters(data, 'labeledFara_UseThisOne', num.cluster)
#Import data
load.distanceK <- function(name){
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
dis.matrix <- read.csv(filename)
#dis.matrix = dis.matrix[,-501] #Hallie's edit to get rid of mysterious X column
row.names(dis.matrix) <- names(dis.matrix)[1:3738]
return((dis.matrix))
}
wssplot <- function(data, nc=15){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#clusters distance matrix into specified number of clusters based off given method
clustering <- function(d, k, method, link="ward.D2"){
# hierarchical clustering
if (method =='hclust'){
fit <- hclust(d, method=link)
#plot(fit)
#plot(as.phylo(fit), type = "fan")
#         rect.hclust(fit, k = 3, border = "red")
#         source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
#         op = par(bg = "#EFEFEF")
#         A2Rplot(fit, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B", "#4ECDC4", "#556270","#337DFF"))
groups <- cutree(fit, k)
print(dim(groups))
op = par(bg = "#EFEFEF")
A2Rplot(fit, k, boxes = FALSE, col.up = "gray50")
cluster.result <- data.frame('visits'= names(groups), 'ward'=as.numeric(groups))
}
return(cluster.result)
}
process.clusters <- function(d, name, k) {
c = list()
for(i in 1:k){
c[[i]] <- d[ which(d$ward == i) ,1]
c[[i]] <- as.integer(gsub("[^0-9]", "", c[[i]]))
c[[i]] <- data.frame(c[[i]])
}
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
Ldata = read.csv(filename, header=FALSE)
inCommon = list()
for(i in 1:k){
inCommon[[i]] <- merge(Ldata, c[[i]], by.x = "V1", by.y = "c..i..")
#print(inCommon[[i]]$V1)
i_s = rep(i, length(inCommon[[i]]$V1))
temp <- data.frame(inCommon[[i]]$V1, i)
write.table(temp, file = "jibber.csv", append = TRUE, sep = ",", col.names=FALSE,row.names=FALSE)
print(as.data.frame(table(inCommon[[i]]$V2)))
}
}
WCSS<- function(d, k_max){
# determine the number of clusters
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(d, k)$tot.withinss})
print twcss
# visualize the results
plot(1:k_max, twcss, type='b')
}
clustering.process <- function() {
# Clustering
num.cluster <- 6
d1 <- load.distanceK('LeftAlignedData_5Hours')
c.clara = clara(d1, num.cluster, samples = 100)
plot(c.clara)
WCSS(d, 20)
#The difference between these two was whether I was using a Kernel or Eucledian distance.  Overall it was me being lazy
#d <- load.distance('problem', select.prefix)
#wssplot(d,nc=6)
#clustering based off different statistical key points.
#fit <- hclust(d, method="ward.D2")
cluster.result1 <- clustering(d1, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(data, 'labeledFara_UseThisOne', num.cluster)
plot(c.clara)
names(cluster.result1) <- c('Visit', 'Ward.D2')
ward = as.vector(c.clara$clustering)
visits = as.vector(names(c.clara$clustering))
data = data.frame(visits, ward)
}
num.cluster <- 6
d1 <- load.distanceK('LeftAlignedData_5Hours')
ward = as.vector(c.clara$clustering)
visits = as.vector(names(c.clara$clustering))
data = data.frame(visits, ward)
process.clusters(data, 'labeledFara_UseThisOne', num.cluster)
c.clara = clara(d1, num.cluster, samples = 100)
ward = as.vector(c.clara$clustering)
library("cluster")
c.clara = clara(d1, num.cluster, samples = 100)
ward = as.vector(c.clara$clustering)
visits = as.vector(names(c.clara$clustering))
data = data.frame(visits, ward)
process.clusters(data, 'labeledFara_UseThisOne', num.cluster)
d2 <- load.distanceL('RightAlignHours=4Data')
#Import data
load.distanceK <- function(name){
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
dis.matrix <- read.csv(filename)
print(length(dis.matrix))
row.names(dis.matrix) <- names(dis.matrix)[1:length(dis.matrix)]
return((dis.matrix))
}
#Import data
load.distanceL <- function(name){
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
dis.matrix <- read.csv(filename)
row.names(dis.matrix) <- names(dis.matrix)[1:length(dis.matrix)]
return(as.dist(dis.matrix))
}
wssplot <- function(data, nc=15){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
#clusters distance matrix into specified number of clusters based off given method
clustering <- function(d, k, method, link="ward.D2"){
# hierarchical clustering
if (method =='hclust'){
fit <- hclust(d, method=link)
#plot(fit)
#plot(as.phylo(fit), type = "fan")
#         rect.hclust(fit, k = 3, border = "red")
#         source("http://addictedtor.free.fr/packages/A2R/lastVersion/R/code.R")
#         op = par(bg = "#EFEFEF")
#         A2Rplot(fit, k = 3, boxes = FALSE, col.up = "gray50", col.down = c("#FF6B6B", "#4ECDC4", "#556270","#337DFF"))
groups <- cutree(fit, k)
print(dim(groups))
op = par(bg = "#EFEFEF")
A2Rplot(fit, k, boxes = FALSE, col.up = "gray50")
cluster.result <- data.frame('visits'= names(groups), 'ward'=as.numeric(groups))
}
return(cluster.result)
}
process.clusters <- function(d, name, k) {
c = list()
for(i in 1:k){
c[[i]] <- d[ which(d$ward == i) ,1]
c[[i]] <- as.integer(gsub("[^0-9]", "", c[[i]]))
c[[i]] <- data.frame(c[[i]])
}
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
Ldata = read.csv(filename, header=FALSE)
inCommon = list()
for(i in 1:k){
inCommon[[i]] <- merge(Ldata, c[[i]], by.x = "V1", by.y = "c..i..")
#print(inCommon[[i]]$V1)
i_s = rep(i, length(inCommon[[i]]$V1))
temp <- data.frame(inCommon[[i]]$V1, i)
write.table(temp, file = "jibber.csv", append = TRUE, sep = ",", col.names=FALSE,row.names=FALSE)
print(as.data.frame(table(inCommon[[i]]$V2)))
}
}
convert.similarity <- function(d){
N <- nrow(d)
S <- matrix(rep(NA,N^2), ncol=N)
for(i in 1:N) {
print(i)
for(j in 1:N) {
S[i,j] <- 1.0 / (1.0+d[i,j])
}
}
return(S)
}
make.affinity <- function(S, n.neighboors=2) {
N <- length(S[,1])
if (n.neighboors >= N) {  # fully connected
A <- S
} else {
A <- matrix(rep(0,N^2), ncol=N)
for(i in 1:N) { # for each line
# only connect to those points with larger similarity
best.similarities <- sort(S[i,], decreasing=TRUE)[1:n.neighboors]
for (s in best.similarities) {
j <- which(S[i,] == s)
if(length(j) != 1){
print(j)
if(length(j) > n.neighboors){
l <- n.neighboors
} else {
l <- length(j)
}
for(n in 1:l){
A[i,j[n]] <- S[i,j[n]]
A[j[n],i] <- S[i,j[n]] # to make an undirected graph, ie, the matrix becomes symmetric
}
} else {
A[i,j] <- S[i,j]
A[j,i] <- S[i,j] # to make an undirected graph, ie, the matrix becomes symmetric
}
}
}
}
return(A)
}
"%^%" <- function(M, power)
with(eigen(M), vectors %*% (values^power * solve(vectors)))
clustering.process <- function() {
library(mlbench)
# Clustering
num.cluster <- 8
setwd("/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results")
#d1 <- load.distanceK('RightAlignHours=4Data')
#S <- 1.0 / (1.0+d1)
A <- make.affinity(S, 3)  # use 3 neighboors (includes self)
D <- diag(apply(A, 1, sum)) # sum rows
U <- D - A
L <- (D %^% (-1/2)) %*% A %*% (D %^% (-1/2))
k   <- num.cluster
evL <- eigen(U, symmetric=TRUE)
Z   <- evL$vectors[,(ncol(evL$vectors)-k+1):ncol(evL$vectors)]
library(stats)
km <- kmeans(Z, centers=k, nstart=20)
ward = as.vector(km$cluster)
visits = as.vector(names(d1))
data = data.frame(visits, ward)
name <- "labeledFara_UseThisOne"
prefix <- '/Users/admin/Documents/Fall_2017/Dr.Chi_Project/results'
filename <- paste(prefix, '/', name, '.csv',sep="") #indicate which file is distance matrix here
Ldata = read.csv(filename, header=FALSE)
process.clusters(data, 'labeledFara_UseThisOne', num.cluster)
# This is k-medoids stuff, ignore it
d2 <- load.distanceL('RightAlignHours=4Data')
##c.clara = clara(d1, num.cluster, samples = 100)
#ward = as.vector(c.clara$clustering)
#visits = as.vector(names(c.clara$clustering))
#data = data.frame(visits, ward)
#process.clusters(data, 'labeledFara_UseThisOne', num.cluster)
cluster.result1 <- clustering(d2, 5, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeledFara_UseThisOne', num.cluster)
}
d2 <- load.distanceL('RightAlignHours=4Data')
num.cluster <- 5
process.clusters(cluster.result1, 'labeledFara_UseThisOne', num.cluster)
cluster.result1 <- clustering(d2, num.cluster, 'hclust', link = 'ward.D2')
process.clusters(cluster.result1, 'labeledFara_UseThisOne', num.cluster)
source('~/Documents/Fall_2017/Dr.Chi_Project/cluster.R')
require(data.table)
#Q1a
# return: string(“cylinders”, “displacement”, “horsepower”, “weight”, “acceleration”, “year”, “origin”),
# represents the covariate providing the best prediction
SLR <- function(path='../data/hw23R-linear.txt'){
}
require(data.table)
install.packages("data.table", dependencies=TRUE)
require(data.table)
-V
V
version
version
getwd()
import.ts("SinusRW_Length_112000_AnomalyL_200_AnomalyN_60_NoisePerc_5.ts")
st <- start("SinusRW_Length_112000_AnomalyL_200_AnomalyN_60_NoisePerc_5.ts")
fr <- frequency("SinusRW_Length_112000_AnomalyL_200_AnomalyN_60_NoisePerc_5.ts")
x <- read.ts("SinusRW_Length_112000_AnomalyL_200_AnomalyN_60_NoisePerc_5.ts")
ocpd1<- onlineCPD(x,hazard_func = function(x, lambda){const_hazard(x, lambda = 5000000000)})
plot(x)
